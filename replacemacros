#!/usr/bin/python

# replacemacros
#
# Copyright 2012 Sietse Ringers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see LICENSE.txt). If not, see
# <http://www.gnu.org/licenses/>.

import sys, os, optparse, re
import pprint
from functools import partial

from findarguments import findarguments

pp = pprint.PrettyPrinter(indent=4)


def findcommands(f):
	commands = []

	# Look foor \def's. We save the first argument (i.e. the command name)
	# here instead of letting findarguments do it, because it may or may not
	# be enclosed by brackets. This causes no problems because the command name
	# may consist only of letters anyway.
	for match in re.finditer(r'\\def\{?(\\[a-zA-Z]*)\}?', f):
		c = { }
		c['name'] = match.group(1)
		(args, pos) = findarguments(f, 1, match.end())
		c['args'] = 0
		c['optarg'] = None
		c['def'] = args[0]['text']
		commands.append(c)

	# Look for \newcommands. 
	for match in re.finditer(r'\\newcommand\{?(\\[a-zA-Z]*)\}?', f):
		c = { }
		c['name'] = match.group(1)
		(args, pos) = findarguments(f, 1, match.end())

		# If the first argument found is a required one, it is the definition;
		# the command accepts no arguments, optional or required ones.
		if args[0]['required']:
			c['args'] = 0
			c['optarg'] = None
			c['def'] = args[0]['text']

		else:
			# The second argument is always the total number of arguments.
			c['args'] = int(args[0]['text'])

			# If the third argument is an optional one, it is the one containing
			# the value for the optional argument. Otherwise it is the definition.
			if args[1]['required']:
				c['optarg'] = None
				c['def'] = args[1]['text']
			else:
				c['optarg'] = args[1]['text']
				c['def'] = args[2]['text']

		commands.append(c)

	#pp.pprint(commands)
	return commands


def replace(f, commands):
	# Grab the body of the text, i.e. the part after \begin{document}. This code
	# also grabs the \end{document} but we don't care.
	preamble, sep, body = f.partition('\\begin{document}')
	if len(body) == 0:
		sys.exit('No body found; exiting')

	for c in commands:
		pos = 0
		while True:
			# Find the next occurence of the command
			start = body.find(c['name'], pos)
			if start == -1: # None found in the remaining text: bail out
				break

			# It's possible that we found \abc while we were looking for \a.
			# Skip those matches.
			if re.match(r'^[a-zA-Z]$', body[start + len(c['name'])]):
				pos = start + len(c['name']) # Look someplace else in the next iter
				continue

			# Retrieve the arguments
			reqargcount = c['args']
			if c['optarg'] != None:
				reqargcount -= 1
			(args, end) = findarguments(body, reqargcount, start + len(c['name']))

			# If the first argument is optional and it was omitted, we insert
			# its standard value in the arguments array for later convenience.
			if c['optarg'] != None and (len(args) == 0 or args[0]['required']):
				args.insert(0, {'required': False, 'text': c['optarg']})

			# Save the positions for later
			if end == 1: # Happens when no arguments were given
				end = start + len(c['name'])
			pos = end # The position at which to start looking in the next iteration

			# Prepare the replacement text
			replacement = c['def']
			for i in range(1, c['args'] + 1):
				replacement = replacement.replace('#%d' % i, args[i-1]['text'])

			# Do the replacing
			body = body[:start] + replacement + body[end:]

	return "%s%s%s" % (preamble, sep, body)


def main():

	## Preparation #############################################################

	usage = """usage: %prog inputfile [outputfile]

		Scans the inputfile for \\newcommand's and \\def's, and then replaces occurences
		of those commands in the body of text with their definitions. If no outputfile
		is given, the result is printed in stdout.

		Some restrictions:
		- \\def's with arguments are not supported, use \\newcommand for those.
		- No comments are allowed within macros.

		No guarantee of correctness of the output is guaranteed. Always check manually."""

	parser = optparse.OptionParser(usage.replace("\t", ''))
	(options, args) = parser.parse_args()
	if len(args) < 1 or len(args) > 2:
		parser.error("Incorrect number of arguments; 1 or 2 expected, %d given" % len(args))

	filepath = args[0]
	if not os.path.exists(filepath):
		parser.error("Nonexistent file: %s" % filepath)

	fileobject = open(filepath)
	f = fileobject.read()
	fileobject.close()

	## Do the work #############################################################

	# Get the defined commands
	commands = findcommands(f)

	# Escape them; in the resulting file they will no longer be needed
	f = f.replace('\\newcommand', '%\\newcommand')
	f = f.replace('\\def', '%\\def')

	# Some commands may depend on others, so we keep doing it until
	# there is no more effect.
	old = f
	new = f
	while True:
		old = new
		new = replace(old, commands)
		if old == new:
			break

	## Save or output ##########################################################
	if len(args) == 2:
		outputfile = open(args[1], 'w')
		outputfile.write(new)
		outputfile.close()
	else:
		print new


if __name__ == "__main__":
	main()
